openapi: 3.0.0

info: 
  title: Shopease
  description: The API collection for Shopease
  version: 1.0.0

servers: 
  - url: http://localhost:9000/api/v1
    description: Shopease Development Server
  - url: http://api.shopease.shubhampurwar.in/api/v1
    description: Shopease Production Server

tags: 
  - name: Authentication
    description: Authentication API
  - name: Users
    description: Users API
  - name: Addresses
    description: Addresses API
  - name: Cart
    description: Cart API
  - name: Wishlist
    description: Wishlist API
  - name: Products
    description: Products API
  - name: Categories
    description: Categories API
  - name: Brands
    description: Brands API
  - name: Coupons
    description: Coupons API
  - name: Orders
    description: Orders API
  - name: Reviews
    description: Reviews API
    
paths: 
  /auth/signup:
    post: 
      tags: 
        - Authentication
      description: Creates an account or restores a deleted one
      operationId: signup
      requestBody: 
        description: A JSON object containing signup info
        required: true
        content: 
          application/json:
            schema: 
              type: object
              properties: 
                firstname: 
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                phone: 
                  type: string
                password: 
                  type: string
                confirmPassword: 
                  type: string
      responses: 
        '200': 
          description: A JSON object containing a restored account
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '201':
          description: A JSON containing a new account
          content: 
            application/json:
              schema: 
                type: object
                properties: 
                  success: 
                    type: boolean
                  message: 
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
  
  /auth/login: 
    post:
      tags:
        - Authentication
      description: Allows users to login using their email address and password
      operationId: login
      requestBody:
        description: A JSON object containing login info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
      responses:
        '200': 
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/logout:
    post:
      tags:
        - Authentication
      description: Allows users to log out
      operationId: logout
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  
  /auth/password/forgot:
    post:
      tags:
        - Authentication
      description: Sends an email to the user with reset password link
      operationId: forgotPassword
      requestBody:
        description: A JSON object containing an email address
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /auth/password/reset/{token}:
    put:
      tags: 
        - Authentication
      description: Allows users to reset their account password
      operationId: resetPassword
      parameters:
        - in: path
          name: token
          required: true
          description: Reset password token
          schema:
            type: string
      requestBody:
        description: A JSON object containing new and confirmed passwords
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: Password reset success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /users/self:
    get:
      tags:
        - Users
      description: Allows users to fetch their profile
      operationId: getProfile
      responses:
        '200':
          description: A JSON object containing a user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message: 
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
    
    put:
      tags:
        - Users
      description: Allows users to update their profile
      operationId: updateProfile
      requestBody:
        description: A JSON object containing new profile info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                phone: 
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message: 
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      description: Allows users to delete their account
      operationId: deleteAccount
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /users/self/avatar:
    post:
      tags:
        - Users
      description: Allows users to add their profile photo
      operationId: addProfilePhoto
      requestBody:
        description: Payload containing an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
            encoding:
              avatar:
                content-type: image/*
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      description: Allows users to remove their profile photo
      operationId: removeProfilePhoto
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /users/self/avatar/update:
    post:
      tags:
        - Users
      description: Allows users to update their profile photo
      operationId: updateProfilePhoto
      requestBody:
        description: Payload containing an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
            encoding:
              avatar:
                content-type: image/*
      responses:
        '200':
          description: A JSON object containing an updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

  /admin/users:
    get:
      tags: 
        - Users
      description: Allows admins to fetch a list of users
      operationId: getUsers
      parameters:
        - in: query
          name: roles
          description: Field to filter users based on their role
          schema:
            type: array
            items: 
              type: string
              enum:
                - user
                - admin
          style: form
          explode: false
        - in: query
          name: sort
          description: Field to sort users by name in asc|desc order
          schema:
            type: string
            enum:
              - name_asc
              - name_desc
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A JSON object containing a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: 
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          headers:
            X-Total-Count:
              description: Total number of users
              schema:
                type: integer
                format: int32

  /admin/users/{userId}:
    get:
      tags: 
        - Users
      description: Allows admins to fetch a user by ID
      operationId: getUserbyId
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

    put:
      tags: 
        - Users
      description: Allows admins to update role of a user
      operationId: updateUserRole
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user whose role is to be updated
          schema:
            type: string
      requestBody:
        description: A JSON object containing a new role
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        '200':
          description: A JSON object containing an updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
    
    delete:
      tags:
        - Users
      description: Allows admins to delete a user
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to be deleted
          schema:
            type: string
      responses: 
        '200':
          description: A JSON object containing ID of the deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /admin/admins: 
    get:
      tags: 
        - Users
      description: Allows admins to fetch a list of other admins
      operationId: getOtherAdmins
      responses:
        '200':
          description: A JSON object containing a list of admins
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data: 
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  
  /admin/self:
    put:
      tags:
        - Users
      description: Allows admins to demote themselves to the role of a user
      operationId: adminSelfDemote
      responses:
        '200':
          description: A JSON object containing an updated admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: 
                    $ref: '#/components/schemas/User'

    delete:
      tags:
        - Users
      description: Allows admins to delete their account
      operationId: adminSelfDelete
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /addresses:
    get:
      tags:
        - Addresses
      description: Allows users to fetch their addresses
      operationId: getAddresses
      responses:
        '200':
          description: A JSON object containing a list of addresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'

    post:
      tags: 
        - Addresses
      description: Allows users to add a new address
      operationId: addNewAddress 
      requestBody:
        description: A JSON object containing address info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBody'
      responses:
        '201':
          description: A JSON object containing a new address
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Address'
  
  /addresses/{addressId}:
    get:
      tags:
        - Addresses
      description: Allows users to fetch one of their addresses by ID
      operationId: getAddressById
      parameters:
        - in: path
          name: addressId
          required: true
          description: ID of the address to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing an address
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Address'

    put:
      tags:
        - Addresses
      description: Allows users to update their address
      operationId: updateAddress
      parameters:
        - in: path
          name: addressId
          required: true
          description: ID of the address to be updated
          schema:
            type: string
      requestBody:
        description: A JSON object containing new address info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBody'
      responses:
        '200':
          description: A JSON object containing an updated address
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Address'
    
    delete:
      tags:
        - Addresses
      description: Allows users to delete their address
      operationId: deleteAddress
      parameters:
        - in: path
          name: addressId
          required: true
          description: ID of the address to be deleted
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing ID of the deleted address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /addresses/{addressId}/default:
    put:
      tags:
        - Addresses
      description: Allows users to set one of their addresses as the default
      operationId: setDefaultAddress
      parameters:
        - in: path
          name: addressId
          required: true
          description: ID of the address to be set as the default
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a default address
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Address'
  
  /cart:
    get:
      tags: 
        - Cart
      description: Allows users to fetch their cart
      operationId: getCart
      responses:
        '200':
          description: A JSON object containing a list of cart items
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'

  /cart/add:
    post:
      tags:
        - Cart
      description: Allows users to add an item to their cart
      operationId: addItemToCart
      requestBody:
        description: ID of the item that is to be added to cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing a new cart item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CartItem'

  /cart/remove:
    put:
      tags:
        - Cart
      description: Allows users to remove an item from their cart
      operationId: removeItemFromCart
      requestBody:
        description: ID of the item that is to be removed from cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing ID of the removed item 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /cart/update:
    put:
      tags:
        - Cart
      description: Allows users to update quantity of a cart item
      operationId: updateItemQuantity
      requestBody:
        description: A JSON object containing product ID and quantity
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
      responses:
        '200':
          description: A JSON object containing a cart item whose quantity was updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CartItem'

  /cart/move:
    put:
      tags:
        - Cart
      description: Alows users to move an item from their cart to wishlist
      operationId: moveItemToWishlist
      requestBody:
        description: ID of the item that is to be moved to wishlist
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing an item that was moved to wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'
     
  /cart/clear:
    put:
      tags:
        - Cart
      description: Allows users to clear their cart
      operationId: clearCart
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /wishlist:
    get:
      tags: 
        - Wishlist
      description: Allows users to fetch their wishlist
      operationId: getWishlist
      responses:
        '200':
          description: A JSON object containing user's wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                     type: array
                     items:
                        $ref: '#/components/schemas/Product'

  /wishlist/add:
    put:
      tags:
        - Wishlist
      description: Allows users to add an item to their wishlist
      operationId: addItemTowWishlist
      requestBody:
        description: ID of the item that is to be added to wishlist
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing a new wishlist item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

  /wishlist/remove:
    put:
      tags:
        - Wishlist
      description: Allows users to remove an item from their wishlist
      operationId: removeItemFromWishlist
      requestBody:
        description: ID of the item to be removed from wishlist
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing ID of the removed item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /wishlist/move:
    put:
      tags:
        - Wishlist
      description: Allows users to move an item from their wishlist to cart
      operationId: moveItemToCart
      requestBody:
        description: ID of the item that is to be moved to cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
      responses:
        '200':
          description: A JSON object containing an item that was moved to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'
              
  /wishlist/clear:
    put:
      tags:
        - Wishlist
      description: Allows users to clear their wishlist
      operationId: clearWishlist
      responses:
        '200':
          description: Wishlist cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'

  /products:
    get:
      tags: 
        - Products
      description: Fetches a list of products
      operationId: getProducts
      parameters:
        - in: query
          name: categories
          description: Field to filter products based on the categories they belong to
          schema:
            type: array
            items: 
              type: string
          style: form
          explode: false
        - in: query
          name: brands
          description: Field to filter products based on the brands they belong to
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - in: query
          name: rating
          description: Field to filter products by their rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - in: query
          name: sort
          description: Option to sort products by
          schema:
            type: string
            enum:
              - recommended
              - new
              - rating
              - price_asc
              - price_desc
            default: recommended
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A JSON object containing a list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
          headers:
            X-Total-Count:
              description: Total number of products
              schema:
                type: integer
                format: int32

  /products/{productId}:
    get:
      tags:
        - Products
      description: Fetches a product by ID
      operationId: getProductById
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

  /admin/products:
    get:
      tags:
        - Products
      description: Allows admins to fetch a list of products
      operationId: adminGetProducts
      parameters:
        - in: query
          name: categories
          description: Field to filter products based on the categories they belong to
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - in: query
          name: brands
          description: Field to filter products based on the brands they belong to
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - in: query
          name: rating
          description: Field to filter products by their rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - in: query
          name: availability
          description: Field to filter products based on whether they are in stock or not
          schema:
            type: string
            enum:
              - true
              - false
              - all
        - in: query
          name: deleted
          description: Field to filter products based on whether they are deleted or not
          schema:
            type: string
            enum:
              - true
              - false
              - all
        - in: query
          name: sort
          description: Option to sort products by
          schema:
            type: string
            enum:
              - new
              - rating
              - price_asc
              - price_desc
              - stock_asc
              - stock_desc
            default: new
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: A JSON object containing a list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
          headers:
            X-Total-Count:
              description: Total number of products
              schema:
                type: integer
                format: int32

    post:
      tags: 
        - Products
      description: Allows admins to add a new product
      operationId: addNewProduct
      requestBody:
        description: Payload containing product info along with an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductBody'
            encoding:
              image:
                contentType: image/*
      responses:
        '201':
          description: A JSON object containing a new product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

  /admin/products/{productId}:
    get:
      tags:
        - Products
      description: Allows admins to fetch a product by ID
      operationId: adminGetProductById
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

    post:
      tags: 
        - Products
      description: Allows admins to update a product
      operationId: updateProduct
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product to be updated
          schema:
            type: string
      requestBody:
        description: Payload containing new product info along with an image in binary encoded format
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductBody'
            encoding:
              image:
                contentType: image/*
      responses:
        '200':
          description: A JSON object containing an updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

    delete:
      tags: 
        - Products
      description: Allows admins to delete a product 
      operationId: deleteProduct
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the product to be deleted
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing ID of the deleted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /admin/products/{productId}/restore:
    put:
      tags:
        - Products
      description: Allows admins to restore a deleted product
      operationId: restoreProduct
      parameters:
        - in: path
          name: productId
          required: true
          description: ID of the deleted product that is to be restored
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a restored product
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Product'

  /categories:
    get:
      tags: 
        - Categories
      description: Fetches a list of all categories
      operationId: getAllCategories
      responses:
        '200':
          description: A JSON object containing a list of all categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /categories/{categoryId}:
    get:
      tags: 
        - Categories
      description: Fetches a category by ID
      operationId: getCategoryById
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Category'

  /admin/categories:
    post:
      tags:
        - Categories
      description: Allows admins to add a new category
      operationId: addNewCategory
      requestBody:
        description: Payload containing title and image of a category
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryBody'
            encoding:
              image:
                contentType: image/*
      responses:
        '201':
          description: A JSON object containing a new category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Category'
              
  /admin/categories/{categoryId}:
    post:
      tags:
        - Categories
      description: Allows admins to update a category
      operationId: updateCategory
      parameters:
        - in: path
          name: categoryId
          required: true
          description: ID of the category to be updated
          schema:
            type: string
      requestBody:
        description: Payload containing title and image of a category
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryBody'
            encoding:
              image:
                contentType: image/*
      responses:
        '200':
          description: A JSON object containing an updated category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Category'

  /categories/listed:
    get:
      tags: 
        - Categories
      description: Fetches a list of categories under which products have been listed
      operationId: getListedCategories
      responses:
        '200':
          description: A JSON object containing a list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /brands:
    get:
      tags: 
        - Brands
      description: Fetches a list of all brands
      operationId: getAllBrands
      responses:
        '200':
          description: A JSON object containing a list of all brands
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Brand'

  /brands/{brandId}:
    get:
      tags: 
        - Brands
      description: Fetches a brand by ID
      operationId: getBrandById
      parameters:
        - in: path
          name: brandId
          required: true
          description: ID of the brand to be fetched
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing a brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Brand'

  /admin/brands:
    post:
      tags:
        - Brands
      description: Allows admins to add a new brand
      operationId: addNewBrand
      requestBody:
        description: Payload containing name and logo of a brand
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandBody'
            encoding:
              logo:
                contentType: image/*
      responses:
        '201':
          description: A JSON object containing a new brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Brand'
            
  /admin/brands/{brandId}:
    post:
      tags:
        - Brands
      description: Allows admins to update a brand
      operationId: updateBrand
      parameters:
        - in: path
          name: brandId
          required: true
          description: ID of the brand to be updated
          schema:
            type: string
      requestBody:
        description: Payload containing name and logo of a brand
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandBody'
            encoding:
              logo:
                contentType: image/*
      responses:
        '200':
          description: A JSON object containing an updated brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Brand'

  /brands/listed:
    get:
      tags: 
        - Brands
      description: Fetches a list of brands under which products have been listed
      operationId: getListedBrands
      responses:
        '200':
          description: A JSON object containing a list of brands
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Brand'

components:
  parameters:
    Page:
      in: query
      name: page
      description: Number of records to skip
      schema: 
        type: integer
        format: int32
        minimum: 1

  schemas:
    Success:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    ID: 
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: string

    User: 
      type: object
      properties: 
        id: 
          type: string
        firstname: 
          type: string
        lastname: 
          type: string
        fullname:
          type: string
        email:
          type: string
        phone: 
          type: string
        role:
          type: string
        avatar:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        cart:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: integer
        wishlist:
          type: array
          items:
            type: string
        resetPasswordToken:
          type: string
        resetPasswordExpiry:
          type: string
        isDeleted:
          type: boolean
        deletedBy:
          type: string
        roleLastUpdatedBy:
          type: string
        deletedAt:
          type: string
        roleUpdatedAt:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - firstname
        - lastname
        - fullname
        - email
        - phone
        - role
        - cart
        - wishlist
        - isDeleted
        - createdAt
        - updatedAt

    Address:
      type: object
      properties:
        id:
          type: string
        fullname:
          type: string
        phone: 
          type: string
        line1:
          type: string
        line2:
          type: string
        landmark:
          type: string
        country:
          type: string
        state:
          type: string
        city:
          type: string
        postalCode:
          type: string
        isDefault:
          type: boolean
        user:
          type: string
        isDeleted:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - fullname
        - phone
        - line1
        - country
        - state
        - city
        - postalCode
        - isDefault
        - user
        - isDeleted
        - createdAt
        - updatedAt

    AddressBody:
      type: object
      properties:
        fullname:
          type: string
        phone:
          type: string
        line1:
          type: string
        line2:
          type: string
        landmark:
          type: string
        country:
          type: string
        state:
          type: string
        city:
          type: string
        postalCode:
          type: string
        isDefault:
          type: boolean
          default: false

    CartItem:
      type: object
      properties:
        product: 
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer

    Product:
      type: object
      properties:
        id: 
          type: string
        title:
          type: string
        description:
          type: string
        price:
          type: number
        brand:
          type: string
        category:
          type: string
        stock:
          type: integer
        image:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        soldUnits:
          type: integer
        avgRating:
          type: number
        reviewCount:
          type: integer
        createdBy:
          type: string
        lastUpdatedBy:
          type: string
        deletedBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        isDeleted:
          type: boolean
          
      required:
        - id
        - title
        - description
        - price
        - brand
        - category
        - stock
        - image
        - soldUnits
        - avgRating
        - reviewCount
        - createdBy
        - createdAt
        - updatedAt
        - isDeleted

    ProductBody:
      type: object
      properties:
        image:
          type: string
          format: binary
        title: 
          type: string
        description: 
          type: string
        price:
          type: number
          format: int32
        brand:
          type: string
        category:  
          type: string
        stock:
          type: integer
          format: int32
      required:
        - image
        - title
        - description
        - price
        - brand
        - category
        - stock

    Category:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        image:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        createdBy:
          type: string
        lastUpdatedBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - title
        - image
        - createdBy
        - createdAt
        - updatedAt

    CategoryBody:
      type: object
      properties:
        image:
          type: string
          format: binary
        title:
          type: string
      required:
        - image
        - title

    Brand:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: object
          properties:
            url:
              type: string
            publicId:
              type: string
        createdBy:
          type: string
        lastUpdatedBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - logo
        - createdBy
        - createdAt
        - updatedAt

    BrandBody:
      type: object
      properties:
        logo:
          type: string
          format: binary
        name:
          type: string
      required:
        - logo
        - name